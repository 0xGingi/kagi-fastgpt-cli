name: Release

permissions:
  contents: write
  packages: write

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        default: 'v0.1.2'
        type: string

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            name: fastgpt-windows-x64.exe
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: fastgpt-linux-x64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: fastgpt-linux-arm64
          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            name: fastgpt-linux-arm32
          - target: x86_64-apple-darwin
            os: macos-latest
            name: fastgpt-macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: fastgpt-macos-arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64

      - name: Install cross-compilation tools for ARM
        if: matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf

      - name: Configure cargo for cross compilation
        run: |
          mkdir -p ~/.cargo
          cat >> ~/.cargo/config.toml << EOF
          [target.x86_64-pc-windows-gnu]
          linker = "x86_64-w64-mingw32-gcc"
          
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          
          [target.armv7-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          EOF

      - name: Set environment for cross compilation
        run: |
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc

      - name: Prepare binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            cp fastgpt.exe ../../../${{ matrix.name }}
          else
            cp fastgpt ../../../${{ matrix.name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create tag (if manual and doesn't exist)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          # Check if tag exists locally
          if ! git tag -l | grep -q "^${{ github.event.inputs.tag_name }}$"; then
            echo "Creating tag ${{ github.event.inputs.tag_name }}"
            git tag -a ${{ github.event.inputs.tag_name }} -m "Release ${{ github.event.inputs.tag_name }}"
          else
            echo "Tag ${{ github.event.inputs.tag_name }} already exists locally"
          fi
          
          # Check if tag exists on remote
          if ! git ls-remote --tags origin | grep -q "refs/tags/${{ github.event.inputs.tag_name }}$"; then
            echo "Pushing tag ${{ github.event.inputs.tag_name }} to remote"
            git push origin ${{ github.event.inputs.tag_name }}
          else
            echo "Tag ${{ github.event.inputs.tag_name }} already exists on remote"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          files: |
            fastgpt-windows-x64.exe/fastgpt-windows-x64.exe
            fastgpt-linux-x64/fastgpt-linux-x64
            fastgpt-linux-arm64/fastgpt-linux-arm64
            fastgpt-linux-arm32/fastgpt-linux-arm32
            fastgpt-macos-x64/fastgpt-macos-x64
            fastgpt-macos-arm64/fastgpt-macos-arm64
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 